	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_SetObjectTransform
_optix_SetObjectTransform:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	ld	c, (ix + 15)
	ld	b, (ix + 16)
	ld	a, (ix + 18)
	ld	(iy + 1), hl
	ld	(iy + 4), de
	ld	(iy + 7), c
	ld	(iy + 8), b
	ld	(iy + 9), a
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_SetObjectCallbacks
_optix_SetObjectCallbacks:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	de, (ix + 12)
	ld	(iy + 21), hl
	ld	(iy + 24), de
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_SetObjectChildren
_optix_SetObjectChildren:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (ix + 9)
	ld	(iy + 27), hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_SetPosition
_optix_SetPosition:
	ld	hl, -9
	call	__frameset
	ld	iy, (ix + 6)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_5
	ld	hl, (ix + 9)
	ld	bc, (ix + 12)
	ld	de, (iy + 1)
	or	a, a
	sbc	hl, de
	ld	(ix + -6), hl
	ld	de, (iy + 4)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	ld	(ix + -9), hl
	ld	hl, (ix + 9)
	ld	(iy + 1), hl
	ld	(iy + 4), bc
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_2
BB3_5:
	ld	sp, ix
	pop	ix
	ret
BB3_2:
	ld	iy, 0
BB3_3:
	ld	(ix + -3), iy
	lea	de, iy + 0
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_5
	ld	de, (iy + 1)
	ld	hl, (ix + -6)
	add	hl, de
	push	hl
	pop	bc
	ld	de, (iy + 4)
	ld	hl, (ix + -9)
	add	hl, de
	push	hl
	push	bc
	push	iy
	call	_optix_SetPosition
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 27)
	ld	iy, (ix + -3)
	ld	de, 3
	add	iy, de
	jq	BB3_3
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_AlignTransformToTransform
_optix_AlignTransformToTransform:
	ld	hl, -12
	call	__frameset
	ld	iy, (ix + 9)
	ld	a, (ix + 12)
	ld	hl, (iy + 1)
	ld	(ix + -3), hl
	ld	e, (iy + 7)
	ld	d, (iy + 8)
	ld	bc, 0
	push	bc
	pop	hl
	ld	l, e
	ld	h, d
	ld	iy, (ix + 6)
	push	hl
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ex	(sp), hl
	pop	iy
	ld	c, iyl
	ld	b, iyh
	or	a, a
	sbc	hl, bc
	ld	(ix + -6), hl
	ld	bc, 2
	call	__idivs
	ld	(ix + -9), hl
	ld	bc, 0
	ld	c, a
	call	__imulu
	ld	(ix + -12), hl
	ld	iy, (ix + 6)
	ld	e, (iy + 12)
	ld	l, e
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, e
	ld	hl, (ix + -3)
	add	hl, bc
	ld	de, (ix + -12)
	add	hl, de
	push	hl
	pop	bc
	ld	hl, (ix + -9)
	add	hl, hl
	ex	de, hl
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	bc
	pop	hl
	add	hl, de
	cp	a, 2
	jq	z, BB4_2
	push	bc
	pop	hl
BB4_2:
	ld	de, (ix + 6)
	push	de
	pop	iy
	ld	(iy + 1), hl
	ld	hl, (ix + 9)
	push	hl
	pop	iy
	ld	hl, (iy + 4)
	ld	(ix + -3), hl
	ld	a, (iy + 9)
	ld	h, 0
	ld	l, a
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	ld	d, h
	or	a, a
	sbc.sis	hl, de
	ld	(ix + -6), l
	ld	(ix + -5), h
	ld.sis	bc, 2
	call	__sdivs
	ld	e, l
	ld	d, h
	ld	a, d
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	h, a
	ld	(ix + -9), e
	ld	(ix + -8), d
	ld	l, e
	ld	a, (ix + 15)
	ld	bc, 0
	ld	c, a
	call	__imulu
	push	hl
	pop	de
	ld	iy, (ix + 6)
	ld	a, (iy + 13)
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	c, a
	ld	iy, (ix + -3)
	add	iy, bc
	add	iy, de
	ld	a, (ix + 15)
	cp	a, 2
	jq	nz, BB4_5
	ld	l, (ix + -9)
	ld	h, (ix + -8)
	add.sis	hl, hl
	ld	e, l
	ld	d, h
	ld	l, (ix + -6)
	ld	h, (ix + -5)
	or	a, a
	sbc.sis	hl, de
	ld	e, l
	ld	d, h
	ld	a, d
	ld	l, a
	rlc	l
	sbc	hl, hl
	push	hl
	pop	bc
	ld	b, a
	ld	c, e
	lea	hl, iy + 0
	add	hl, bc
	jq	BB4_4
BB4_5:
	lea	hl, iy + 0
BB4_4:
	ld	iy, (ix + 6)
	ld	(iy + 4), hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_CheckTransformOverlap
_optix_CheckTransformOverlap:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 6)
	ld	iy, (ix + 9)
	xor	a, a
	ld	de, (iy + 1)
	push	hl
	pop	iy
	ld	hl, (iy + 1)
	push	hl
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ex	(sp), hl
	pop	iy
	ld	bc, 0
	ld	c, iyl
	ld	b, iyh
	ld	(ix + -3), hl
	add	hl, bc
	push	hl
	pop	bc
	ld	(ix + -6), de
	ex	de, hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB5_9
	ld	iy, (ix + 9)
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	de, 0
	push	de
	pop	bc
	ld	c, l
	ld	b, h
	ld	hl, (ix + -6)
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB5_8
	ld	iy, (ix + 9)
	ld	hl, (iy + 4)
	ld	(ix + -3), hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 4)
	ld	c, (iy + 9)
	ld	(ix + -6), c
	push	de
	pop	bc
	push	af
	ld	a, (ix + -6)
	ld	iyl, a
	pop	af
	ld	c, iyl
	ld	(ix + -6), hl
	add	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix + -3)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB5_7
	ld	iy, (ix + 9)
	ld	e, (iy + 9)
	ld	hl, (ix + -3)
	add	hl, de
	ex	de, hl
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB5_4
	ld	a, 0
	jq	BB5_6
BB5_9:
	jq	BB5_7
BB5_8:
	jq	BB5_7
BB5_4:
	ld	a, 1
BB5_6:
BB5_7:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RecursiveAlign
_optix_RecursiveAlign:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 6)
	ld	a, (iy)
	cp	a, 5
	jq	nz, BB6_2
	ld	hl, (iy + 30)
	push	hl
	call	_optix_RecursiveAlign
	ld	iy, (ix + 6)
	pop	hl
BB6_2:
	lea	bc, iy + 0
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB6_3
BB6_8:
	ld	sp, ix
	pop	ix
	ret
BB6_3:
	ld	iy, 0
BB6_4:
	ld	(ix + -3), iy
	lea	de, iy + 0
	add	hl, de
	ld	iy, (hl)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB6_8
	ld	a, (iy + 10)
	ld	l, (iy + 11)
	push	hl
	ld	l, a
	push	hl
	push	bc
	push	iy
	ld	(ix + -6), iy
	call	_optix_AlignTransformToTransform
	ld	iy, (ix + -6)
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	iy
	call	nz, _optix_RecursiveAlign
	pop	hl
	ld	iy, (ix + 6)
	lea	bc, iy + 0
	ld	hl, (iy + 27)
	ld	iy, (ix + -3)
	ld	de, 3
	add	iy, de
	jq	BB6_4
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RecursiveSetNeedsRedraw
_optix_RecursiveSetNeedsRedraw:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	push	hl
	pop	bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB7_1
BB7_8:
	pop	hl
	pop	ix
	ret
BB7_1:
BB7_2:
	push	bc
	pop	hl
	ld	hl, (hl)
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB7_8
	push	de
	pop	hl
	push	hl
	pop	iy
	ld	(iy + 17), 1
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	(ix + -3), bc
	jq	z, BB7_5
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	ld	iy, (ix + -3)
	pop	hl
	lea	bc, iy + 0
	ld	de, (iy)
BB7_5:
	push	de
	pop	hl
	ld	a, (hl)
	cp	a, 5
	jq	nz, BB7_7
	push	de
	pop	iy
	ld	iy, (iy + 30)
	ld	(iy + 17), 1
	push	de
	pop	iy
	ld	iy, (iy + 30)
	ld	hl, (iy + 27)
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	ld	bc, (ix + -3)
	pop	hl
BB7_7:
	push	bc
	pop	iy
	lea	iy, iy + 3
	lea	bc, iy + 0
	jq	BB7_2
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_CycleSelectedElement
_optix_CycleSelectedElement:
	ld	hl, -9
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, 0
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_26
	ld	hl, (iy)
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_26
	lea	hl, iy + 3
	ld	(ix + -3), hl
	ld	(ix + -6), bc
BB8_3:
	push	de
	pop	iy
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_6
	ld	a, (iy + 14)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB8_7
	ld	hl, (ix + -6)
	inc	hl
	ld	(ix + -6), hl
	ld	iy, (ix + -3)
	ld	de, (iy)
	lea	iy, iy + 3
	ld	(ix + -3), iy
	jq	BB8_3
BB8_6:
	push	bc
	pop	de
	ld	iy, (ix + 6)
	jq	BB8_8
BB8_7:
	ld	iy, (ix + 6)
	ld	de, (ix + -6)
BB8_8:
	ld	bc, 3
	ld	(ix + -6), de
BB8_9:
	inc	de
	push	de
	pop	hl
	call	__imulu
	push	hl
	pop	bc
	add	iy, bc
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jq	z, BB8_11
	ex	de, hl
BB8_11:
	ld	(ix + -9), hl
	ld	de, 3
	push	de
	pop	bc
	call	__imulu
	push	hl
	pop	de
	ld	bc, (ix + 6)
	push	bc
	pop	iy
	add	iy, de
	ld	iy, (iy)
	ld	(ix + -3), iy
	ld	a, (iy + 16)
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	de, (ix + -9)
	push	bc
	pop	iy
	ld	bc, 3
	jq	nz, BB8_9
	ld	bc, 3
	ld	hl, (ix + -6)
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	iy, (iy)
	ld	(iy + 14), 0
	ld	a, (iy)
	cp	a, 5
	jq	nz, BB8_14
	ld	iy, (iy + 30)
	ld	(iy + 14), 0
BB8_14:
	ld	iy, (ix + -3)
	ld	(iy + 17), 1
	ld	(iy + 14), 1
	ld	e, (iy)
	ld	a, e
	cp	a, 5
	jq	nz, BB8_16
	ld	iy, (ix + -3)
	ld	iy, (iy + 30)
	ld	(iy + 14), 1
	ld	(iy + 17), 1
	ld	iy, (ix + -3)
BB8_16:
	ld	hl, (_current_context)
	ld	hl, (hl)
	ld	a, (hl)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB8_26
	ld	a, e
	cp	a, 5
	jq	nz, BB8_21
	ld	iy, (ix + -3)
	ld	iy, (iy + 30)
	ld	hl, (iy + 27)
	ld	iy, (ix + -3)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_23
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, _optix_SetCurrentSelection
	jq	BB8_25
BB8_21:
	ld	hl, (iy + 27)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB8_23
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB8_27
BB8_23:
	push	iy
BB8_24:
	call	_optix_SetCurrentSelection
BB8_25:
	pop	hl
BB8_26:
	ld	sp, ix
	pop	ix
	ret
BB8_27:
	push	hl
	jq	BB8_24
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetNumElementsInStack
_optix_GetNumElementsInStack:
	ld	hl, -3
	call	__frameset
	ld	hl, (ix + 6)
	ld	de, 0
	push	hl
	pop	iy
	ld	(ix + -3), de
BB9_1:
	push	hl
	pop	bc
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB9_5
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB9_6
	ld	hl, (ix + -3)
	inc	hl
	ld	(ix + -3), hl
	lea	iy, iy + 3
	push	bc
	pop	hl
	jq	BB9_1
BB9_5:
	jq	BB9_4
BB9_6:
	ld	de, (ix + -3)
BB9_4:
	ld	l, e
	ld	h, d
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_optix_SetCurrentSelection
	extern	__idivs
	extern	__setflag
	extern	__sdivs
	extern	_current_context
	extern	__Unwind_SjLj_Unregister
	extern	__imulu
	extern	__frameset0
