	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_AlignMenu
_optix_AlignMenu:
	ld	hl, -21
	call	__frameset
	ld	iy, (ix + 6)
	ld	de, 0
	ld	hl, (iy + 18)
	ld	(ix + -9), hl
	ld	hl, (hl)
	ld	(ix + -3), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_13
BB0_2:
	ld	iy, (ix + 6)
	ld	bc, (iy + 24)
	ld	iy, (iy + 27)
	lea	hl, iy + 0
	ld	(ix + -12), bc
	call	__imulu
	push	hl
	pop	bc
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	push	de
	pop	bc
	ld	(ix + -6), bc
	jq	p, BB0_3
	lea	de, iy + 0
	ld	hl, (ix + -3)
	ld	a, (hl)
	cp	a, 2
	jq	nz, BB0_14
	ld	iy, (ix + 6)
	ld	c, (iy + 7)
	ld	b, (iy + 8)
	or	a, a
	sbc	hl, hl
	ld	l, c
	ld	h, b
	push	de
	pop	bc
	call	__idivs
	ld	(ix + -21), hl
	ld	iy, (ix + -3)
	ld	(iy + 7), l
	ld	(iy + 8), h
	ld	iy, (ix + 6)
	ld	a, (iy + 9)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	bc, (ix + -12)
	call	__idivs
	ld	(ix + -12), hl
	ld	a, l
	ld	iy, (ix + -3)
	ld	(iy + 9), a
	ld	iy, (ix + 6)
	ld	hl, (iy + 1)
	ld	(ix + -18), hl
	ld	iy, (ix + -6)
	lea	hl, iy + 0
	push	de
	pop	bc
	call	__idivs
	ld	(ix + -15), hl
	call	__imulu
	push	hl
	pop	de
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + -21)
	ld	bc, 65535
	call	__iand
	push	hl
	pop	bc
	ex	de, hl
	call	__imulu
	ld	de, (ix + -18)
	add	hl, de
	ld	iy, (ix + -3)
	ld	(iy + 1), hl
	ld	iy, (ix + 6)
	ld	de, (iy + 4)
	ld	hl, (ix + -12)
	ld	bc, 255
	call	__iand
	push	hl
	pop	bc
	ld	hl, (ix + -15)
	call	__imulu
	add	hl, de
	ld	iy, (ix + -3)
	ld	(iy + 4), hl
	ld	iy, (iy + 18)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_6
	jq	BB0_12
BB0_3:
	ld	iy, (ix + -3)
	ld	(iy + 11), 0
	jq	BB0_12
BB0_14:
	jq	BB0_12
BB0_6:
	ld	hl, (iy)
	push	hl
	pop	de
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_12
	lea	bc, iy + 0
	ld	hl, 3
	ld	(ix + -9), hl
	push	de
	pop	iy
BB0_8:
	ld	a, (iy)
	or	a, a
	jq	nz, BB0_10
	ld	a, (iy + 24)
	ld	l, (iy + 25)
	push	hl
	ld	l, a
	push	hl
	ld	hl, (ix + -3)
	push	hl
	push	iy
	call	_optix_AlignTransformToTransform
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + -3)
	ld	bc, (iy + 18)
BB0_10:
	ld	iy, (ix + -9)
	lea	de, iy + 0
	push	bc
	pop	hl
	add	hl, de
	ld	hl, (hl)
	ld	de, 3
	add	iy, de
	ld	(ix + -9), iy
	push	hl
	pop	iy
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_8
	ld	iy, (ix + 6)
	ld	hl, (iy + 18)
	ld	(ix + -9), hl
BB0_12:
	ld	de, (ix + -6)
	inc	de
	push	de
	pop	hl
	ld	bc, 3
	call	__imulu
	push	hl
	pop	bc
	ld	hl, (ix + -9)
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -3), hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB0_2
BB0_13:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateMenu_default
_optix_UpdateMenu_default:
	ld	hl, -10
	call	__frameset
	ld	de, (ix + 6)
	ld	hl, _optix_cursor
	xor	a, a
	ld	(ix + -4), a
	push	de
	push	hl
	call	_optix_CheckTransformOverlap
	pop	hl
	pop	hl
	and	a, 1
	ld	iy, (ix + 6)
	ld	(iy + 10), a
	ld	iy, (iy + 18)
	ld	hl, (iy)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB1_2
BB1_1:
	ld	sp, ix
	pop	ix
	ret
BB1_2:
	ld	e, 1
	ld	bc, 0
	ld	(ix + -7), bc
	ld	(ix + -3), iy
	push	hl
	pop	iy
	push	bc
	pop	hl
BB1_3:
	xor	a, e
	bit	0, a
	jq	nz, BB1_9
	ld	a, (ix + -4)
	and	a, 1
	xor	a, e
	bit	0, a
	jq	z, BB1_9
	ld	(ix + -10), hl
	ld	hl, (iy + 15)
	push	iy
	call	__indcallhl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 18)
	ld	de, (ix + -10)
	push	de
	pop	bc
	ld	(ix + -3), hl
	add	hl, de
	ld	iy, (hl)
	ld	a, (iy)
	cp	a, 2
	jq	nz, BB1_10
	ld	a, (iy + 10)
	ld	l, 1
	xor	a, l
	bit	0, a
	push	bc
	pop	hl
	jq	nz, BB1_12
	ld	iy, (ix + 6)
	ld	de, (ix + -7)
	ld	(iy + 21), de
	ld	a, 1
	ld	(ix + -4), a
	jq	BB1_12
BB1_9:
	ld	(iy + 10), 0
BB1_12:
	ld	bc, (ix + -3)
	push	hl
	pop	de
	push	bc
	pop	iy
	ld	(ix + -3), iy
	add	iy, de
	ld	bc, (iy + 3)
	push	bc
	pop	hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_1
	ld	hl, (ix + -7)
	inc	hl
	ld	(ix + -7), hl
	ex	de, hl
	ld	iy, (ix + 6)
	ld	a, (iy + 10)
	ld	de, 3
	add	hl, de
	ld	e, 1
	push	bc
	pop	iy
	jq	BB1_3
BB1_10:
	push	bc
	pop	hl
	jq	BB1_12
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderMenu_default
_optix_RenderMenu_default:
	call	__frameset0
	ld	iy, (ix + 6)
	ld	hl, (iy + 18)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, _optix_RenderStack
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	__setflag
	extern	_optix_CheckTransformOverlap
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	__iand
	extern	__Unwind_SjLj_Unregister
	extern	__indcallhl
	extern	__imulu
	extern	_optix_cursor
	extern	_optix_AlignTransformToTransform
	extern	_optix_RenderStack
	extern	__frameset0
	extern	__idivs
