	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_GetMenuOptionWidth
_optix_GetMenuOptionWidth:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 6)
	ld	bc, (ix + 12)
	ld	l, (ix + 15)
	ld	h, (ix + 16)
	ld	de, 0
	ld	e, l
	ld	d, h
	push	de
	pop	hl
	call	__idivs
	ld	(ix + -3), hl
	inc	iy
	lea	hl, iy + 0
	call	__irems
	ld	(ix + -6), hl
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	hl, (ix + -6)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB0_2
	ld	iy, 0
BB0_2:
	ld	de, (ix + -3)
	add	iy, de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_GetMenuOptionHeight
_optix_GetMenuOptionHeight:
	ld	hl, -6
	call	__frameset
	ld	de, (ix + 9)
	ld	a, (ix + 18)
	ld	iy, 0
	ld	iyl, a
	lea	hl, iy + 0
	push	de
	pop	bc
	call	__idivs
	ld	(ix + -3), hl
	ld	hl, (ix + 6)
	ld	bc, (ix + 12)
	call	__idivs
	ld	(ix + -6), hl
	push	de
	pop	bc
	dec	de
	ld	hl, (ix + -3)
	call	__imulu
	push	hl
	pop	bc
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	push	hl
	pop	bc
	ld	hl, (ix + -6)
	or	a, a
	sbc	hl, de
	jq	z, BB1_2
	ld	bc, 0
BB1_2:
	ld	a, c
	ld	hl, (ix + -3)
	add	a, l
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateMenu_default
_optix_UpdateMenu_default:
	ld	hl, -24
	call	__frameset
	ld	iy, (ix + 6)
	xor	a, a
	ld	(ix + -3), a
	ld	de, (iy + 56)
	ld	bc, -1
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB2_2
	ld	(iy + 71), de
BB2_2:
	lea	de, iy + 0
	ld	iy, (_current_context)
	ld	hl, (iy + 9)
	push	de
	push	hl
	call	_optix_CheckTransformOverlap
	pop	hl
	pop	hl
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB2_6
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	xor	a, e
	ld	hl, (_current_context)
	ld	(ix + -6), hl
	ld	hl, (hl)
	ld	l, (hl)
	xor	a, e
	bit	0, a
	jq	nz, BB2_7
	ld	a, l
	xor	a, e
	bit	0, a
	jq	z, BB2_18
	ld	hl, (iy + 71)
	ld	(iy + 56), hl
	ld	(iy + 17), 1
	ld	(iy + 14), 1
	jq	BB2_8
BB2_6:
	ld	hl, -1
	ld	de, (ix + 6)
	push	de
	pop	iy
	ld	(iy + 56), hl
	ld	(iy + 14), 0
	jq	BB2_61
BB2_7:
	ld	(iy + 14), 1
	ld	a, l
	xor	a, e
	bit	0, a
	jq	z, BB2_19
BB2_8:
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	ld	(ix + -6), iy
	ld	a, (iy + 3)
	xor	a, e
	bit	0, a
	jq	nz, BB2_52
	ld	iy, -720866
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	or	a, a
	jq	z, BB2_52
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	3, a
	jq	nz, BB2_37
	ld.sis	bc, 1
	ld	l, (iy)
	ld	h, (iy + 1)
	call	__sand
	ld	a, l
	xor	a, e
	bit	0, a
	jq	z, BB2_39
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	1, a
	jq	z, BB2_15
	ld	a, e
	ld	iy, (ix + 6)
	ld	de, (iy + 56)
	ld	bc, (iy + 65)
	push	de
	pop	hl
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB2_62
	ld	l, 1
	ld	(ix + -3), l
	ld	e, a
	ld	iy, -720866
BB2_15:
	ld	l, (iy)
	ld	h, (iy + 1)
	ld	a, l
	bit	2, a
	ld	a, (ix + -3)
	jq	z, BB2_50
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 56)
	inc	de
	ld	bc, (iy + 65)
	push	de
	pop	hl
	call	__irems
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_51
	jq	BB2_17
BB2_18:
	ld	(iy + 14), 1
BB2_19:
	ld	bc, (iy + 65)
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	de, 0
	ld	e, l
	ld	d, h
	push	de
	pop	hl
	call	__idivs
	push	hl
	pop	iy
	ld	hl, 1
	call	__irems
	ld	(ix + -9), hl
	ld	(ix + -3), iy
	lea	hl, iy + 0
	ld	(ix + -12), bc
	call	__imulu
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	ld	hl, (ix + -9)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ex	de, hl
	jq	z, BB2_21
	or	a, a
	sbc	hl, hl
BB2_21:
	ld	de, (ix + -3)
	add	hl, de
	ld	(ix + -3), hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	bc, (iy + 62)
	ld	a, (iy + 9)
	ld	iy, 0
	ld	iyl, a
	lea	hl, iy + 0
	call	__idivs
	push	bc
	pop	de
	dec	de
	ld	(ix + -9), hl
	call	__imulu
	push	hl
	pop	bc
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	ld	(ix + -15), de
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	hl, 0
	jq	z, BB2_23
	push	hl
	pop	iy
BB2_23:
	ld	de, (ix + -9)
	add	iy, de
	ld	(ix + -9), iy
	ld	iy, (ix + -6)
	ld	iy, (iy + 3)
	ld	a, (iy + 3)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB2_33
	ld	hl, -720868
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	dec	hl
	ld	a, e
	bit	1, a
	jq	nz, BB2_29
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	2, a
	jq	z, BB2_33
	ld	(ix + -6), iy
	ld	iy, (ix + 6)
	ld	hl, (iy + 59)
	ld	de, (ix + -12)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	bc, 1
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB2_28
	ld	de, 0
BB2_28:
	ld	(iy + 59), de
	lea	hl, iy + 0
	jq	BB2_32
BB2_29:
	ld	(ix + -6), iy
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	iy, (iy + 59)
	ld	(ix + -24), iy
	ld	bc, (ix + -12)
	add	iy, bc
	ld	(ix + -21), iy
	push	hl
	pop	iy
	ld	hl, (iy + 68)
	ld	(ix + -18), hl
	ld	hl, (ix + -15)
	call	__imulu
	push	hl
	pop	de
	ld	hl, (ix + -18)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	iy, (ix + -21)
	lea	hl, iy + 0
	or	a, a
	sbc	hl, de
	call	__setflag
	lea	de, iy + 0
	jq	m, BB2_31
	ld	de, (ix + -24)
BB2_31:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	(iy + 59), de
BB2_32:
	ld	iy, (ix + -6)
	ld	(iy + 3), 0
	push	hl
	pop	iy
	ld	(iy + 17), 1
BB2_33:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB2_35
	ld	a, 0
	jq	BB2_36
BB2_35:
	ld	a, 1
BB2_36:
	ld	iy, (_current_context)
	ld	hl, (iy + 3)
	lea	de, iy + 0
	and	a, 1
	push	hl
	pop	iy
	ld	(iy + 3), a
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 59)
	lea	bc, iy + 0
	ld	(ix + -6), hl
	push	de
	pop	iy
	ld	iy, (iy + 9)
	ld	(ix + -12), iy
	ld	hl, (iy + 4)
	push	bc
	pop	iy
	ld	de, (iy + 4)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + -9)
	ld	bc, 255
	call	__iand
	push	hl
	pop	bc
	ex	de, hl
	call	__idivs
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	ld	hl, (iy + 65)
	call	__imulu
	ld	(ix + -9), hl
	ld	iy, (ix + -12)
	ld	hl, (iy + 1)
	ld	iy, (ix + 6)
	ld	de, (iy + 1)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	ld	hl, (ix + -3)
	ld	bc, 65535
	call	__iand
	push	hl
	pop	bc
	ex	de, hl
	call	__idivs
	push	hl
	pop	de
	ld	bc, (ix + -6)
	ld	hl, (ix + -9)
	add	hl, bc
	add	hl, de
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	jq	BB2_56
BB2_37:
	ld	iy, (ix + 6)
	ld	hl, (iy + 56)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB2_41
	ld	a, 0
	jq	BB2_42
BB2_39:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 56)
	ld	bc, (iy + 68)
	dec	bc
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	z, BB2_45
	ld	a, 0
	jq	BB2_46
BB2_41:
	ld	a, 1
BB2_42:
	ld	de, 0
	bit	0, a
	ld	bc, (ix + 6)
	push	bc
	pop	iy
	jq	nz, BB2_49
	ld	de, (iy + 65)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	jq	BB2_49
BB2_45:
	ld	a, 1
BB2_46:
	bit	0, a
	jq	z, BB2_48
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	jq	BB2_49
BB2_48:
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 65)
	add	hl, de
	ex	de, hl
BB2_49:
	and	a, 1
	ld	(iy + 56), de
	ld	iy, (ix + -6)
	ld	(iy + 3), 0
	ld	e, 1
BB2_50:
	xor	a, e
	bit	0, a
	jq	nz, BB2_52
BB2_51:
	ld	iy, (ix + -6)
	ld	(iy + 3), 1
BB2_52:
	ld	iy, (ix + 6)
	ld	de, (iy + 56)
	ld	bc, 0
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB2_56
	ld	bc, (iy + 68)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	m, BB2_55
	dec	bc
	push	bc
	pop	de
BB2_55:
	push	de
	pop	bc
BB2_56:
	ld	(iy + 56), bc
	ld	de, (iy + 59)
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB2_58
	push	bc
	pop	de
	ld	bc, (iy + 65)
	push	de
	pop	hl
	call	__irems
	push	hl
	pop	bc
	ex	de, hl
	or	a, a
	sbc	hl, bc
	jq	BB2_60
BB2_58:
	ld	hl, (iy + 62)
	dec	hl
	ld	(ix + -3), bc
	ld	bc, (iy + 65)
	ld	(ix + -6), hl
	call	__imulu
	add	hl, de
	ld	de, (ix + -3)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB2_61
	ex	de, hl
	call	__idivs
	ld	de, (ix + -6)
	or	a, a
	sbc	hl, de
	call	__imulu
BB2_60:
	ld	(iy + 59), hl
	ld	(iy + 17), 1
BB2_61:
	ld	sp, ix
	pop	ix
	ret
BB2_62:
	dec	de
BB2_17:
	ld	iy, (ix + 6)
	ld	(iy + 56), de
	ld	iy, (ix + -6)
	ld	(iy + 3), 0
	jq	BB2_52
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderMenu_default
_optix_RenderMenu_default:
	ld	hl, -171
	call	__frameset
	ld	iy, 46
	ld	bc, 0
	lea	hl, ix + -52
	push	ix
	ld	de, -156
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	de, ix + -89
	ld	(ix + -3), bc
	push	ix
	ld	bc, -144
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	lea	de, ix + -98
	push	ix
	ld	bc, -153
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	ix
	ld	bc, -135
	add	ix, bc
	lea	de, ix + 0
	pop	ix
	push	ix
	ld	bc, -141
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	push	iy
	ld	bc, (ix + -3)
	push	bc
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 37
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -144
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -156
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -98), hl
	ld	bc, -144
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -95), hl
	ld	hl, 0
	ld	(ix + -92), hl
	ld	hl, 37
	push	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -141
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_memset
	pop	hl
	pop	hl
	pop	hl
	ld	bc, -153
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -108), hl
	ld	hl, 2
	push	hl
	ld	bc, -141
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeWidget
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	ld	a, (iy + 17)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB3_2
	ld	hl, (iy + 56)
	ld	de, (iy + 71)
	or	a, a
	sbc	hl, de
	jq	nz, BB3_2
BB3_33:
	ld	sp, ix
	pop	ix
	ret
BB3_2:
	ld	bc, 3
	ld	de, (iy + 59)
	push	de
	pop	hl
	call	__imulu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -147
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	push	ix
	ld	bc, -150
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ld	bc, (ix + -3)
BB3_3:
	ld	bc, (iy + 62)
	ld	hl, (iy + 65)
	call	__imulu
	ld	(ix + -3), de
	ld	de, -150
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	add	hl, bc
	push	hl
	pop	bc
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	ld	bc, -138
	lea	hl, ix + 0
	add	hl, bc
	ld	(hl), de
	ex	de, hl
	ld	bc, (ix + -3)
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB3_33
	ld	iy, (ix + 6)
	ld	a, (iy + 17)
	ld	l, 1
	xor	a, l
	xor	a, l
	bit	0, a
	jq	nz, BB3_7
	ld	iy, (ix + 6)
	ld	bc, (iy + 56)
	ld	de, -138
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	jq	z, BB3_7
	ld	iy, (ix + 6)
	ld	bc, (iy + 71)
	ld	de, -138
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_32
BB3_7:
	ld	bc, -153
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	ld	(ix + -108), hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 50)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB3_10
	push	ix
	ld	bc, -147
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_9
BB3_10:
	ld	hl, 0
	ld	(ix + -20), hl
	jq	BB3_11
BB3_9:
	ld	(ix + -20), hl
	ld	bc, -156
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeTextTransform
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	ld	bc, -156
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeWidget
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	ld	(ix + -7), 0
	ld	a, (iy + 42)
	ld	(ix + -42), a
	ld	a, (iy + 43)
	ld	(ix + -41), a
BB3_11:
	ld	iy, (iy + 53)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	ix
	ld	de, -138
	push	af
	add	ix, de
	pop	af
	ld	bc, (ix + 0)
	pop	ix
	jq	z, BB3_18
	ld	(ix + -3), bc
	ld	bc, -147
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	lea	hl, iy + 0
	add	hl, de
	ld	hl, (hl)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + -3)
	jq	nz, BB3_13
BB3_18:
	ld	de, 0
	ld	(ix + -59), de
	jq	BB3_19
BB3_13:
	ld	hl, (ix + -20)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 0
	ld	e, a
	jq	z, BB3_17
	push	bc
	pop	de
	add	hl, de
	ld	a, (hl)
	or	a, a
	ld	a, 1
	ld	e, a
	jq	nz, BB3_16
	ld	a, 0
	ld	e, a
BB3_16:
BB3_17:
	ex	de, hl
	ld	de, 1
	push	de
	pop	bc
	call	__iand
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	add	iy, de
	ld	hl, (iy)
	ld	(ix + -59), hl
	ld	hl, 1
	push	hl
	ld	de, -144
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	call	_optix_InitializeWidget
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	a, (iy + 46)
	ld	(ix + -79), a
	ld	a, (iy + 47)
	ld	(ix + -78), a
	ld	de, (ix + -59)
BB3_19:
	ld	hl, (ix + -108)
	ld	bc, -150
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	hl, (ix + -20)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jq	nz, BB3_21
	ld	a, 0
BB3_21:
	and	a, 1
	ld	iy, 0
	lea	bc, iy + 0
	ld	c, a
	ex	de, hl
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	a, 1
	jq	nz, BB3_23
	ld	a, 0
BB3_23:
	and	a, 1
	lea	hl, iy + 0
	ld	l, a
	add	hl, bc
	ld	bc, 3
	call	__imulu
	push	hl
	pop	de
	ld	(ix + -3), bc
	ld	bc, -150
	lea	iy, ix + 0
	add	iy, bc
	ld	iy, (iy + 0)
	add	iy, de
	ld	hl, 0
	ld	(iy), hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 1)
	push	ix
	ld	de, -162
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	bc, (ix + -3)
	ld	bc, (iy + 65)
	ld	de, -138
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	call	__irems
	push	ix
	ld	de, -165
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, (iy + 56)
	or	a, a
	sbc	hl, hl
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	(ix + -3), de
	ld	de, -168
	lea	iy, ix + 0
	add	iy, de
	ld	(iy + 0), hl
	call	__idivs
	push	hl
	pop	iy
	ld	de, (ix + -3)
	ld	(ix + -3), bc
	push	ix
	ld	bc, -159
	add	ix, bc
	ld	(ix + 0), de
	pop	ix
	ex	de, hl
	lea	de, iy + 0
	inc	hl
	ld	bc, (ix + -3)
	call	__irems
	ld	(ix + -3), bc
	ld	bc, -171
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	push	de
	pop	hl
	ld	bc, (ix + -3)
	ld	(ix + -3), de
	push	ix
	ld	de, -150
	add	ix, de
	ld	(ix + 0), bc
	pop	ix
	call	__imulu
	push	hl
	pop	bc
	push	ix
	ld	de, -168
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	ix
	ld	bc, -171
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	de, (ix + -3)
	jq	z, BB3_25
	ld	iy, 0
BB3_25:
	add	iy, de
	ex	de, hl
	ld	e, iyl
	ld	d, iyh
	ex	de, hl
	ld	(ix + -128), l
	ld	(ix + -127), h
	lea	hl, iy + 0
	ld	bc, 65535
	call	__iand
	ld	de, -165
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	call	__imulu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -162
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	hl, de
	push	ix
	ld	bc, -134
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 4)
	push	ix
	ld	bc, -162
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	de, (iy + 59)
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	ix
	ld	bc, -138
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	add	hl, de
	ld	bc, (ix + -3)
	push	ix
	ld	de, -150
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	call	__idivs
	push	ix
	ld	de, -165
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	lea	hl, iy + 0
	ld	de, (iy + 62)
	ld	a, (iy + 9)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(ix + -3), bc
	ld	bc, -168
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
	ld	bc, (ix + -3)
	push	de
	pop	bc
	call	__idivs
	push	hl
	pop	iy
	ld	(ix + -3), de
	push	ix
	ld	de, -159
	add	ix, de
	ld	hl, (ix + 0)
	pop	ix
	push	ix
	ld	de, -150
	add	ix, de
	ld	bc, (ix + 0)
	pop	ix
	call	__idivs
	push	ix
	ld	de, -159
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, (ix + -3)
	push	de
	pop	bc
	dec	de
	ld	(ix + -3), de
	push	ix
	ld	de, -150
	add	ix, de
	ld	(ix + 0), iy
	pop	ix
	lea	hl, iy + 0
	call	__imulu
	push	hl
	pop	bc
	ld	de, -168
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	iy
	push	ix
	ld	bc, -159
	add	ix, bc
	ld	hl, (ix + 0)
	pop	ix
	ld	de, (ix + -3)
	or	a, a
	sbc	hl, de
	jq	z, BB3_27
	ld	iy, 0
BB3_27:
	ld	bc, -150
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	add	iy, de
	ld	a, iyl
	ld	(ix + -126), a
	lea	hl, iy + 0
	ld	bc, 255
	call	__iand
	ld	de, -165
	lea	iy, ix + 0
	add	iy, de
	ld	bc, (iy + 0)
	call	__imulu
	ld	(ix + -3), bc
	push	ix
	ld	bc, -162
	add	ix, bc
	ld	de, (ix + 0)
	pop	ix
	add	hl, de
	push	ix
	ld	de, -131
	add	ix, de
	ld	(ix + 0), hl
	pop	ix
	ld	de, -141
	lea	hl, ix + 0
	add	hl, de
	ld	hl, (hl)
	push	hl
	ld	bc, (ix + -3)
	call	_optix_RecursiveAlign
	pop	hl
	ld	iy, (ix + 6)
	ld	a, (iy + 14)
	ld	l, 1
	xor	a, l
	bit	0, a
	ld	a, 0
	jq	nz, BB3_31
	ld	de, (iy + 56)
	ld	bc, -138
	lea	hl, ix + 0
	add	hl, bc
	ld	hl, (hl)
	or	a, a
	sbc	hl, de
	ld	a, 1
	jq	z, BB3_30
	ld	a, 0
BB3_30:
BB3_31:
	and	a, 1
	ld	(ix + -121), a
	ld	hl, (ix + -108)
	push	hl
	call	_optix_RecursiveSetNeedsRedraw
	pop	hl
	ld	hl, (ix + -114)
	ld	bc, -141
	lea	iy, ix + 0
	add	iy, bc
	ld	de, (iy + 0)
	push	de
	call	__indcallhl
	ld	iy, (ix + 6)
	pop	hl
	ld	hl, (iy + 59)
	ld	bc, -150
	lea	iy, ix + 0
	add	iy, bc
	ld	(iy + 0), hl
BB3_32:
	ld	bc, -138
	lea	hl, ix + 0
	add	hl, bc
	ld	de, (hl)
	inc	de
	ld	bc, 3
	ld	(ix + -3), de
	ld	de, -147
	lea	iy, ix + 0
	add	iy, de
	ld	hl, (iy + 0)
	add	hl, bc
	push	ix
	ld	bc, -147
	add	ix, bc
	ld	(ix + 0), hl
	pop	ix
	ld	iy, (ix + 6)
	ld	de, (ix + -3)
	jq	BB3_3
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_optix_CheckTransformOverlap
	extern	_memset
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_kb_AnyKey
	extern	_optix_InitializeWidget
	extern	__indcallhl
	extern	_optix_InitializeTextTransform
	extern	__sand
	extern	_optix_RecursiveAlign
	extern	__idivs
	extern	__setflag
	extern	_current_context
	extern	__Unwind_SjLj_Unregister
	extern	__irems
	extern	__iand
	extern	__imulu
	extern	_optix_RecursiveSetNeedsRedraw
