	section	.text,"ax",@progbits
	assume	adl = 1
	section	.text,"ax",@progbits
	public	_optix_UpdateWindow_default
_optix_UpdateWindow_default:
	ld	hl, -16
	call	__frameset
	ld	iy, (ix + 6)
	ld	d, 0
	ld	a, (iy + 15)
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB0_26
	ld	hl, -720868
	ld.sis	bc, 1
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	call	__sand
	ld	a, l
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB0_3
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	z, BB0_23
BB0_3:
	ld	(ix + -1), d
	ld	hl, _optix_cursor
	push	iy
	push	hl
	call	_optix_CheckTransformOverlap
	pop	hl
	pop	hl
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB0_18
	ld	de, (_optix_cursor+25)
	ld	hl, (_optix_cursor+1)
	ld	(ix + -4), hl
	or	a, a
	sbc	hl, de
	jq	nz, BB0_6
	ld	hl, (_optix_cursor+28)
	ld	bc, (_optix_cursor+4)
	ld	(ix + -7), bc
	ld	bc, (ix + -7)
	or	a, a
	sbc	hl, bc
	jq	z, BB0_18
BB0_6:
	ld	(ix + -16), de
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	de, (iy + 1)
	ld	hl, (iy + 4)
	ld	(ix + -7), hl
	ld	a, (iy + 9)
	ld	hl, (ix + -4)
	ld	(ix + -10), de
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ld	(ix + -13), de
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	de, 18
	or	a, a
	sbc	hl, de
	jq	nc, BB0_9
	ld	de, 1
	ld	hl, (ix + -10)
	push	hl
	pop	bc
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	m, BB0_11
	ld	hl, (ix + -4)
	ld	de, (ix + -16)
	or	a, a
	sbc	hl, de
	push	hl
	pop	de
	or	a, a
	sbc	hl, hl
	or	a, a
	sbc	hl, de
	ld	(ix + -4), hl
	ld	hl, 3
	ld	(_optix_cursor+31), hl
	ex	de, hl
	jq	BB0_12
BB0_9:
	ld	iy, (ix + 6)
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	hl, (ix + -13)
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	de, 18
	or	a, a
	sbc	hl, de
	jq	nc, BB0_13
	ld	hl, (ix + -4)
	ld	de, (ix + -16)
	or	a, a
	sbc	hl, de
	ld	(ix + -4), hl
	ld	hl, 3
	ld	(_optix_cursor+31), hl
	ld	iy, (ix + 6)
	or	a, a
	sbc	hl, hl
	jq	BB0_16
BB0_11:
	or	a, a
	sbc	hl, hl
	ld	(ix + -4), hl
BB0_12:
	ld	iy, (ix + 6)
	jq	BB0_17
BB0_13:
	ld	de, 0
	ld	e, a
	ld	bc, (_optix_cursor+4)
	ld	iy, (ix + -7)
	add	iy, de
	push	bc
	pop	hl
	lea	bc, iy + 0
	ld	(ix + -4), hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	push	de
	pop	iy
	add	iy, iy
	sbc	hl, hl
	push	hl
	pop	bc
	ex	de, hl
	add	hl, bc
	call	__ixor
	ld	bc, 18
	or	a, a
	sbc	hl, bc
	jq	nc, BB0_15
	ld	bc, 4
	ld	a, (_optix_cursor+28)
	ld	l, a
	ld	de, (ix + -4)
	ld	a, e
	sub	a, l
	ld	(ix + -1), a
	ld	(_optix_cursor+31), bc
BB0_15:
	or	a, a
	sbc	hl, hl
	ld	(ix + -4), hl
	ld	iy, (ix + 6)
BB0_16:
	ld	bc, (ix + -10)
BB0_17:
	add	hl, bc
	ld	(iy + 1), hl
	ld	de, (ix + -7)
	push	de
	push	hl
	push	iy
	call	_optix_SetPosition
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	de, (ix + -4)
	add.sis	hl, de
	ld	(iy + 7), l
	ld	(iy + 8), h
	ld	a, (iy + 9)
	add	a, (ix + -1)
	ld	(iy + 9), a
	ld	e, a
	push	de
	push	hl
	push	iy
	call	_optix_ResizeWindow
	pop	hl
	pop	hl
	pop	hl
BB0_18:
	ld	hl, (_optix_cursor+31)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix + 6)
	ld	e, 1
	jq	nz, BB0_23
	push	iy
	ld	hl, _optix_cursor
	push	hl
	call	_optix_CheckTransformOverlap
	ld	e, 1
	pop	hl
	pop	hl
	xor	a, e
	bit	0, a
	jq	nz, BB0_21
	ld	iy, (ix + 6)
	ld	(iy + 14), 1
	jq	BB0_23
BB0_21:
	ld	hl, (_optix_cursor+31)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	ld	iy, (ix + 6)
	jq	nz, BB0_23
	ld	(iy + 14), 0
BB0_23:
	ld	a, (iy + 14)
	xor	a, e
	bit	0, a
	jq	nz, BB0_26
	ld	hl, (iy + 22)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, _optix_UpdateStack
	pop	hl
BB0_26:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_ResizeWindow
_optix_ResizeWindow:
	ld	hl, -3
	call	__frameset
	ld	iy, (ix + 6)
	ld	a, (iy + 25)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB1_11
	ld	e, (ix + 9)
	ld	d, (ix + 10)
	ld	a, (ix + 12)
	ld	c, (iy + 32)
	ld	b, (iy + 33)
	ld	l, e
	ld	h, d
	or	a, a
	sbc.sis	hl, bc
	jq	c, BB1_3
	ld	c, e
	ld	b, d
BB1_3:
	ld	l, (iy + 34)
	cp	a, l
	jq	c, BB1_5
	ld	l, a
BB1_5:
	ld	(iy + 7), c
	ld	(iy + 8), b
	ld	(ix + -1), l
	ld	(iy + 9), l
	ld	iy, (iy + 22)
BB1_6:
	lea	de, iy + 0
	ld	iy, (iy)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB1_10
	ld	(iy + 7), c
	ld	(iy + 8), b
	ld	a, (ix + -1)
	ld	(iy + 9), a
	ld	a, (iy)
	cp	a, 3
	jq	nz, BB1_9
	ld	(ix + -3), c
	ld	(ix + -2), b
	ld	c, (iy + 32)
	ld	b, (iy + 33)
	ld	l, (ix + -3)
	ld	h, (ix + -2)
	call	__sdivu
	ld	bc, 0
	ld	c, l
	ld	b, h
	ld	(iy + 41), bc
	ld	c, (iy + 34)
	ld	b, (ix + -1)
	call	__bdivu
	ld	c, (ix + -3)
	ld	b, (ix + -2)
	or	a, a
	sbc	hl, hl
	ld	l, a
	ld	(iy + 38), hl
	ld	(iy + 7), c
	ld	(iy + 8), b
	ld	a, (ix + -1)
	ld	(iy + 9), a
BB1_9:
	push	de
	pop	iy
	lea	iy, iy + 3
	jq	BB1_6
BB1_10:
	ld	hl, (ix + 6)
	push	hl
	call	_optix_RecursiveAlign
	pop	hl
BB1_11:
	pop	hl
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderWindow_default
_optix_RenderWindow_default:
	ld	hl, -6
	call	__frameset
	ld	iy, (ix + 6)
	ld	a, (iy + 15)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB2_3
	ld.sis	bc, 2
	ld	l, (iy + 1)
	ld	h, (iy + 2)
	dec.sis	hl
	ld	(ix + -6), hl
	ld	e, (iy + 4)
	dec	e
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	add.sis	hl, bc
	ld	a, (iy + 9)
	add	a, 2
	ld	c, a
	ld	(ix + -3), bc
	ld	a, (_optix_colors+1)
	ld	c, a
	ld	a, (_optix_colors+4)
	ld	iyl, a
	push	iy
	push	bc
	ld	bc, (ix + -3)
	push	bc
	push	hl
	ld	l, e
	push	hl
	ld	hl, (ix + -6)
	push	hl
	call	_optix_OutlinedRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 22)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, _optix_RenderStack
	pop	hl
BB2_3:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_UpdateWindowTitleBar_default
_optix_UpdateWindowTitleBar_default:
	ld	hl, -24
	call	__frameset
	ld	bc, (ix + 6)
	push	bc
	pop	iy
	ld	iy, (iy + 25)
	ld	e, (iy + 14)
	ld	l, (iy + 15)
	push	bc
	pop	iy
	ld	c, 1
	ld	a, l
	xor	a, c
	ld	(iy + 15), l
	bit	0, a
	jq	nz, BB3_37
	ld	(ix + -1), e
	ld.sis	hl, 318
	ld	(ix + -4), hl
	ld	hl, (iy + 22)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, _optix_UpdateStack
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	ld	hl, _optix_cursor
	push	hl
	call	_optix_CheckTransformOverlap
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	ld	e, 1
	xor	a, e
	bit	0, a
	jq	nz, BB3_33
	ld	hl, -720868
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld.sis	bc, 1
	call	__sand
	ld	a, l
	xor	a, e
	xor	a, e
	bit	0, a
	jq	nz, BB3_6
	ld	hl, -720878
	push	de
	ld	e, (hl)
	inc	hl
	ld	d, (hl)
	ld	l, e
	ld	h, d
	pop	de
	ld	a, l
	bit	5, a
	jq	z, BB3_28
BB3_6:
	ld	a, (ix + -1)
	xor	a, e
	bit	0, a
	jq	z, BB3_8
BB3_7:
	ld	iy, (ix + 6)
	ld	iy, (iy + 25)
	ld	(iy + 14), 1
	ld	iy, (ix + 6)
	jq	BB3_27
BB3_8:
	ld	bc, (_optix_cursor+25)
	ld	de, (_optix_cursor+1)
	push	de
	pop	hl
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_10
	ld	hl, (_optix_cursor+28)
	ld	(ix + -7), bc
	ld	bc, (_optix_cursor+4)
	ld	(ix + -10), hl
	ld	(ix + -13), bc
	or	a, a
	sbc	hl, bc
	ld	bc, (ix + -7)
	jq	z, BB3_7
	jq	BB3_11
BB3_10:
	ld	hl, (_optix_cursor+4)
	ld	(ix + -13), hl
	ld	hl, (_optix_cursor+28)
	ld	(ix + -10), hl
BB3_11:
	ld	iy, (iy + 1)
	ex	de, hl
	or	a, a
	sbc	hl, bc
	push	hl
	pop	de
	add	iy, de
	ld	(ix + -7), iy
	ld	iy, (ix + 6)
	ld	de, (iy + 4)
	ld	hl, (ix + -13)
	ld	bc, (ix + -10)
	or	a, a
	sbc	hl, bc
	add	hl, de
	push	hl
	pop	bc
	ld	iy, (ix + 6)
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	(ix + -21), l
	ld	(ix + -20), h
	ld	iy, (ix + 6)
	ld	e, (iy + 9)
	or	a, a
	sbc	hl, hl
	ld	(ix + -10), e
	ld	(ix + -9), d
	ld	l, e
	ld	(ix + -24), hl
	ld	de, 1
	ld	hl, (ix + -7)
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB3_14
	ld	(ix + -16), bc
	ld	iy, (ix + 6)
	ld	iy, (iy + 25)
	ld	a, (iy + 25)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	z, BB3_17
	ld	de, 0
	ld	hl, (ix + -16)
	or	a, a
	sbc	hl, de
	call	__setflag
	ld	hl, 1
	ld	(ix + -7), hl
	ld	l, (ix + -21)
	ld	h, (ix + -20)
	ld	(ix + -4), hl
	ld	hl, (ix + -24)
	ld	(ix + -13), hl
	ld	iy, (ix + 6)
	jq	m, BB3_16
	jq	BB3_20
BB3_14:
	ld	iy, (ix + 6)
	ld	de, 0
	push	bc
	pop	hl
	or	a, a
	sbc	hl, de
	call	__setflag
	jq	p, BB3_18
	ld	hl, (ix + -7)
	ld	de, 1
	or	a, a
	sbc	hl, de
	jq	nz, BB3_19
BB3_16:
	ld	e, (ix + -10)
	ld	d, (ix + -9)
	ld	d, 0
	ld.sis	hl, 238
	or	a, a
	sbc.sis	hl, de
	ld.sis	bc, 2
	call	__sdivs
	ld	c, l
	ld	b, h
	ld	a, b
	ld	l, a
	rlc	l
	sbc	hl, hl
	ld	h, a
	ld	l, c
	ld	(ix + -13), hl
	ld	hl, 1
	ld	(ix + -7), hl
	dec	hl
	ld	(ix + -16), hl
	ld.sis	hl, 158
	ld	(ix + -4), hl
	jq	BB3_20
BB3_17:
	ld	hl, 238
	ld	de, (ix + -24)
	or	a, a
	sbc	hl, de
	ld	(ix + -13), hl
	ld	hl, 1
	ld	(ix + -7), hl
	dec	hl
	ld	(ix + -16), hl
	ld.sis	hl, 158
	ld	(ix + -4), hl
	ld	iy, (ix + 6)
	jq	BB3_20
BB3_18:
	ld	(ix + -16), bc
	ld	l, (ix + -21)
	ld	h, (ix + -20)
	ld	(ix + -4), hl
	ld	hl, (ix + -24)
	ld	(ix + -13), hl
	jq	BB3_20
BB3_19:
	ld	hl, 238
	ld	de, (ix + -24)
	or	a, a
	sbc	hl, de
	ld	(ix + -13), hl
	ld	hl, 1
	ld	(ix + -7), hl
	dec	hl
	ld	(ix + -16), hl
BB3_20:
	ld	iy, (iy + 25)
	ld	(ix + -19), iy
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	de, 0
	push	de
	pop	bc
	ld	c, l
	ld	b, h
	ld	iy, (ix + -7)
	add	iy, bc
	ld	hl, 319
	or	a, a
	sbc	hl, bc
	ld	(ix + -10), hl
	ld	bc, 320
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB3_22
	ld	hl, (ix + -7)
	ld	(ix + -10), hl
BB3_22:
	ld	iy, (ix + -19)
	ld	a, (iy + 9)
	push	de
	pop	bc
	ld	c, a
	ld	de, (ix + -16)
	push	de
	pop	iy
	add	iy, bc
	ld	hl, 239
	or	a, a
	sbc	hl, bc
	ld	(ix + -7), hl
	ld	bc, 240
	lea	hl, iy + 0
	or	a, a
	sbc	hl, bc
	call	__setflag
	jq	p, BB3_24
	ld	(ix + -7), de
BB3_24:
	ld	de, (ix + -4)
	ld	l, e
	ld	h, d
	ld	c, (ix + -21)
	ld	b, (ix + -20)
	or	a, a
	sbc.sis	hl, bc
	jq	nz, BB3_38
	ld	hl, (ix + -13)
	ld	bc, (ix + -24)
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_38
BB3_26:
	ld	hl, (ix + -7)
	push	hl
	ld	hl, (ix + -10)
	push	hl
	ld	hl, (ix + 6)
	push	hl
	call	_optix_SetPosition
	pop	hl
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	bc, (iy + 25)
	ld	de, 0
	ld	e, (iy + 9)
	ld	hl, (ix + -7)
	add	hl, de
	push	hl
	ld	hl, (ix + -10)
	push	hl
	push	bc
	call	_optix_SetPosition
	ld	iy, (ix + 6)
	pop	hl
	pop	hl
	pop	hl
BB3_27:
	ld	e, 1
BB3_28:
	ld	hl, (_optix_cursor+31)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	nz, BB3_33
	ld	a, (ix + -1)
	xor	a, e
	bit	0, a
	jq	z, BB3_31
	ld	hl, 1
	jq	BB3_32
BB3_31:
	ld	hl, 2
BB3_32:
	ld	(_optix_cursor+31), hl
BB3_33:
	ld	iy, (iy + 25)
	ld	hl, (iy + 19)
	push	iy
	call	__indcallhl
	pop	hl
	ld	hl, (ix + 6)
	ex	de, hl
	push	de
	pop	iy
	ld	iy, (iy + 25)
	lea	bc, iy + 0
	ld	hl, (iy + 1)
	push	de
	pop	iy
	ld	de, (iy + 1)
	or	a, a
	sbc	hl, de
	jq	nz, BB3_35
	push	bc
	pop	iy
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	iy, (ix + 6)
	ld	e, (iy + 7)
	ld	d, (iy + 8)
	push	bc
	pop	iy
	or	a, a
	sbc.sis	hl, de
	jq	z, BB3_36
BB3_35:
	ld	hl, (ix + 6)
	push	hl
	call	_optix_RefreshWindowTitleBarTransform
	pop	hl
	ld	iy, (ix + 6)
	ld	iy, (iy + 25)
BB3_36:
	ld	a, (iy + 14)
	ld	iy, (ix + 6)
	ld	(iy + 14), a
BB3_37:
	ld	sp, ix
	pop	ix
	ret
BB3_38:
	or	a, a
	sbc	hl, hl
	ld	l, e
	ld	h, d
	ld	(ix + -16), hl
	ld	hl, (ix + -13)
	push	hl
	push	de
	ld	hl, (ix + -19)
	push	hl
	call	_optix_ResizeWindow
	pop	hl
	pop	hl
	pop	hl
	or	a, a
	sbc	hl, hl
	push	hl
	call	_gfx_SetDraw
	pop	hl
	ld	a, (_optix_colors+21)
	ld	l, a
	push	hl
	call	_gfx_SetColor
	pop	hl
	ld	bc, (ix + -10)
	dec	bc
	ld	de, 2
	ld	hl, (ix + -16)
	add	hl, de
	ld	(ix + -16), hl
	ld	iy, (ix + 6)
	ld	de, 0
	ld	e, (iy + 9)
	ld	hl, (ix + -13)
	inc	hl
	add	hl, de
	push	hl
	ld	hl, (ix + -16)
	push	hl
	ld	de, (ix + -7)
	push	de
	push	bc
	call	_gfx_Rectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	hl, 1
	push	hl
	call	_gfx_SetDraw
	pop	hl
BB3_39:
	call	_kb_AnyKey
	or	a, a
	jq	z, BB3_26
	call	_kb_Scan
	jq	BB3_39
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RefreshWindowTitleBarTransform
_optix_RefreshWindowTitleBarTransform:
	ld	hl, -6
	call	__frameset
	ld	hl, (ix + 6)
	ld	(ix + -6), hl
	push	hl
	pop	iy
	ld	(ix + -3), iy
	ld	de, (iy + 25)
	push	de
	pop	iy
	ld	bc, (iy + 1)
	ld	iy, (ix + -3)
	ld	(iy + 1), bc
	push	de
	pop	iy
	ld	hl, (iy + 4)
	ld	bc, -14
	add	hl, bc
	ld	iy, (ix + -3)
	ld	(iy + 4), hl
	push	de
	pop	iy
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld	iy, (ix + -3)
	ld	(iy + 7), l
	ld	(iy + 8), h
	ld	(iy + 9), 14
	ld	hl, (ix + -6)
	ld	(ix + 6), hl
	ld	sp, ix
	pop	ix
	jp	_optix_RecursiveAlign
	section	.text,"ax",@progbits

	section	.text,"ax",@progbits
	public	_optix_RenderWindowTitleBar_default
_optix_RenderWindowTitleBar_default:
	ld	hl, -8
	call	__frameset
	ld	iy, (ix + 6)
	ld	a, (iy + 15)
	ld	l, 1
	xor	a, l
	bit	0, a
	jq	nz, BB5_11
	lea	bc, iy + 0
	ld	iy, (iy + 25)
	ld	a, (iy + 14)
	xor	a, l
	ld	e, a
	push	bc
	pop	iy
	ld	l, (iy + 1)
	ld	h, (iy + 2)
	dec.sis	hl
	ld	(ix + -8), hl
	ld	a, (iy + 4)
	ld	(ix + -4), a
	ld	l, (iy + 7)
	ld	h, (iy + 8)
	ld.sis	bc, 2
	add.sis	hl, bc
	ld	a, (iy + 9)
	ld	(ix + -5), a
	ld	a, (_optix_colors+2)
	ld	iyl, a
	ld	a, (_optix_colors+3)
	ld	(ix + -3), e
	bit	0, e
	jq	nz, BB5_3
	ld	iyl, a
BB5_3:
	ld	a, (_optix_colors+4)
	ld	e, a
	push	de
	push	iy
	ld	a, (ix + -5)
	ld	e, a
	push	de
	push	hl
	ld	a, (ix + -4)
	ld	l, a
	push	hl
	ld	hl, (ix + -8)
	push	hl
	call	_optix_OutlinedRectangle
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_colors+5)
	ld	l, a
	ld	a, (_optix_colors+7)
	ld	c, (ix + -3)
	bit	0, c
	jq	nz, BB5_5
	ld	l, a
BB5_5:
	ld	a, (_optix_colors+6)
	ld	e, a
	ld	a, (_optix_colors+8)
	bit	0, c
	jq	nz, BB5_7
	ld	e, a
BB5_7:
	push	de
	push	hl
	call	_optix_SetTextColor
	pop	hl
	pop	hl
	ld	hl, (ix + 6)
	push	hl
	pop	iy
	ld	hl, (iy + 28)
	ld	(ix + -3), hl
	lea	de, iy + 0
	ld	iy, (iy + 1)
	ld	hl, 3
	push	hl
	pop	bc
	add	iy, bc
	lea	bc, iy + 0
	push	de
	pop	iy
	ld	hl, (iy + 4)
	ld	de, 3
	add	hl, de
	push	hl
	push	bc
	ld	hl, (ix + -3)
	push	hl
	call	_gfx_PrintStringXY
	pop	hl
	pop	hl
	pop	hl
	ld	a, (_optix_colors+19)
	ld	l, a
	ld	a, (_optix_colors+20)
	ld	e, a
	push	de
	push	hl
	call	_optix_SetTextColor
	pop	hl
	pop	hl
	ld	iy, (ix + 6)
	ld	hl, (iy + 22)
	add	hl, bc
	or	a, a
	sbc	hl, bc
	push	hl
	call	nz, _optix_RenderStack
	pop	hl
	ld	iy, (ix + 6)
	ld	iy, (iy + 25)
	lea	hl, iy + 0
	add	hl, bc
	or	a, a
	sbc	hl, bc
	jq	z, BB5_11
	ld	hl, (iy + 16)
	push	iy
	call	__indcallhl
	pop	hl
BB5_11:
	ld	sp, ix
	pop	ix
	ret
	section	.text,"ax",@progbits

	ident	"clang version 12.0.0 (https://github.com/jacobly0/llvm-project 170be88120e3aa88c20eea5615ba76b8f1d6c647)"
	extern	_optix_CheckTransformOverlap
	extern	__Unwind_SjLj_Register
	extern	__frameset
	extern	_kb_AnyKey
	extern	_optix_cursor
	extern	_kb_Scan
	extern	_optix_SetPosition
	extern	__indcallhl
	extern	_optix_colors
	extern	_optix_UpdateStack
	extern	__sand
	extern	_optix_RecursiveAlign
	extern	_gfx_SetDraw
	extern	__setflag
	extern	__sdivs
	extern	__sdivu
	extern	__Unwind_SjLj_Unregister
	extern	__ixor
	extern	_optix_RenderStack
	extern	_gfx_SetColor
	extern	_gfx_Rectangle
	extern	_optix_SetTextColor
	extern	_optix_OutlinedRectangle
	extern	_gfx_PrintStringXY
	extern	__bdivu
